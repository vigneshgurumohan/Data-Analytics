# Import necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pyspark.sql.functions import avg, col, count, when
from pyspark.sql import functions as F

# Extract columns with 'flag' in their names
flag_columns = [col for col in df.columns if 'flag' in col]

# Extract columns with 'tkt_size' in their names but not containing 'flag'
tkt_size_columns = [col for col in df.columns if 'tkt_size' in col and 'flag' not in col]

# Calculate average ticket sizes by cluster
avg_tkt_sizes = clusters.groupBy("prediction").agg(
    *[F.round(avg(c), 0).alias(f"{c}_avg__tkt_size") for c in tkt_size_columns]
).orderBy(col("prediction")).toPandas()

# Calculate counts of "high" occurrences (value == 3) across flag columns by cluster
cluster_counts = clusters.groupBy("prediction").agg(
    *[count(when(col(c) == 3, c)).alias(f"{c}_high_count") for c in flag_columns]
).orderBy(col("prediction")).toPandas()

# Normalize data within each row (cluster) for flag columns
heatmap_data_normalized = cluster_counts.set_index('prediction')[
    [f"{c}_high_count" for c in flag_columns]
].apply(lambda x: x / x.sum(), axis=1)

# Normalize data within each row (cluster) for ticket size columns
avg_tkt_sizes_normalized = avg_tkt_sizes.set_index('prediction')[
    [f"{c}_avg__tkt_size" for c in tkt_size_columns]
].apply(lambda x: x, axis=1)

# Transpose the normalized data for better visualization
heatmap_data_normalized = heatmap_data_normalized.T
avg_tkt_sizes_normalized = avg_tkt_sizes_normalized.T

# Plotting both heatmaps side by side
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(30, 16))

# Plot heatmap for customer distribution across flag types
sns.heatmap(heatmap_data_normalized, annot=True, cmap="YlGnBu", fmt='.1%', cbar_kws={'format': '%.0f%%'}, ax=ax1, vmax=0.25)
ax1.set_title('Relative Distribution of Customers across Flag Types by Cluster')
ax1.set_ylabel('Flag Columns')
ax1.set_xlabel('Cluster Prediction')
ax1.set_yticklabels(flag_columns, rotation=0, ha="right")
ax1.xaxis.set_ticks_position("top")

# Plot heatmap for average ticket sizes across clusters
sns.heatmap(avg_tkt_sizes_normalized, annot=True, cmap="YlOrRd", cbar=True, ax=ax2, fmt='.0f', vmax=25000)
ax2.set_title('Average Ticket Sizes by Cluster')
ax2.set_xlabel('Cluster Prediction')
ax2.set_ylabel('Ticket Size Columns')
ax2.set_yticklabels(tkt_size_columns, rotation=0, ha="right")

# Adjust layout for better spacing
plt.tight_layout()
plt.show()
